// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "lsv2ctl3.h"

// Dispatch interfaces referenced by this interface
#include "font.h"

/////////////////////////////////////////////////////////////////////////////
// CLSV2ctl3

IMPLEMENT_DYNCREATE(CLSV2ctl3, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLSV2ctl3 properties

CString CLSV2ctl3::GetCaption()
{
	CString result;
	GetProperty(DISPID_CAPTION, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetCaption(LPCTSTR propVal)
{
	SetProperty(DISPID_CAPTION, VT_BSTR, propVal);
}

OLE_COLOR CLSV2ctl3::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CLSV2ctl3::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

COleFont CLSV2ctl3::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CLSV2ctl3::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

short CLSV2ctl3::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CLSV2ctl3::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

CString CLSV2ctl3::Get_Port()
{
	CString result;
	GetProperty(0x0, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::Set_Port(LPCTSTR propVal)
{
	SetProperty(0x0, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetPort()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetPort(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

BOOL CLSV2ctl3::GetAutoBaudRate()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CLSV2ctl3::SetAutoBaudRate(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CLSV2ctl3::GetBackgroundTransfer()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CLSV2ctl3::SetBackgroundTransfer(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

long CLSV2ctl3::GetBaudRate()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CLSV2ctl3::SetBaudRate(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

CString CLSV2ctl3::GetBinaryFileTypes()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetBinaryFileTypes(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

short CLSV2ctl3::GetCanOverwrite()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CLSV2ctl3::SetCanOverwrite(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

long CLSV2ctl3::GetDialogLanguage()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CLSV2ctl3::SetDialogLanguage(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

CString CLSV2ctl3::GetDirMask()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetDirMask(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetIPAddress()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetIPAddress(LPCTSTR propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetLoginPasswordPLC()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetLoginPasswordPLC(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetLoginPasswordSYS()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetLoginPasswordSYS(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetLoginPasswordTNC()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetLoginPasswordTNC(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetOnlineConverterPath()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetOnlineConverterPath(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

short CLSV2ctl3::GetProgressDialogVisible()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CLSV2ctl3::SetProgressDialogVisible(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

CString CLSV2ctl3::GetProtocolFile()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetProtocolFile(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

long CLSV2ctl3::GetTransferMode()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CLSV2ctl3::SetTransferMode(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

CString CLSV2ctl3::GetBackgroundErrorString()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetBackgroundErrorString(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

BOOL CLSV2ctl3::GetFileServerFunction()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CLSV2ctl3::SetFileServerFunction(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

BOOL CLSV2ctl3::GetHostFunction()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CLSV2ctl3::SetHostFunction(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

long CLSV2ctl3::GetLastError()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CLSV2ctl3::SetLastError(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

CString CLSV2ctl3::GetLastErrorString()
{
	CString result;
	GetProperty(0x15, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetLastErrorString(LPCTSTR propVal)
{
	SetProperty(0x15, VT_BSTR, propVal);
}

short CLSV2ctl3::GetMedium()
{
	short result;
	GetProperty(0x16, VT_I2, (void*)&result);
	return result;
}

void CLSV2ctl3::SetMedium(short propVal)
{
	SetProperty(0x16, VT_I2, propVal);
}

BOOL CLSV2ctl3::GetTNCKeyLock()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CLSV2ctl3::SetTNCKeyLock(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CLSV2ctl3::GetTNCPrivateTree()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CLSV2ctl3::SetTNCPrivateTree(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

long CLSV2ctl3::GetTransferProgress()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CLSV2ctl3::SetTransferProgress(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

long CLSV2ctl3::GetTransferState()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CLSV2ctl3::SetTransferState(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

CString CLSV2ctl3::GetVersionNC()
{
	CString result;
	GetProperty(0x1b, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetVersionNC(LPCTSTR propVal)
{
	SetProperty(0x1b, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetVersionOCX()
{
	CString result;
	GetProperty(0x1c, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetVersionOCX(LPCTSTR propVal)
{
	SetProperty(0x1c, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetVersionOPT()
{
	CString result;
	GetProperty(0x1d, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetVersionOPT(LPCTSTR propVal)
{
	SetProperty(0x1d, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetVersionPLC()
{
	CString result;
	GetProperty(0x1e, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetVersionPLC(LPCTSTR propVal)
{
	SetProperty(0x1e, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetVersionSIK()
{
	CString result;
	GetProperty(0x1f, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetVersionSIK(LPCTSTR propVal)
{
	SetProperty(0x1f, VT_BSTR, propVal);
}

CString CLSV2ctl3::GetVersionTNC()
{
	CString result;
	GetProperty(0x20, VT_BSTR, (void*)&result);
	return result;
}

void CLSV2ctl3::SetVersionTNC(LPCTSTR propVal)
{
	SetProperty(0x20, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLSV2ctl3 operations

BOOL CLSV2ctl3::ActivateProgram(LPCTSTR ProgramName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ProgramName);
	return result;
}

BOOL CLSV2ctl3::Backup(short Mode, LPCTSTR FileName, LPCTSTR Source)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Mode, FileName, Source);
	return result;
}

BOOL CLSV2ctl3::BreakTransfer()
{
	BOOL result;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLSV2ctl3::ChangeDir(LPCTSTR PathName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PathName);
	return result;
}

BOOL CLSV2ctl3::Connect()
{
	BOOL result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLSV2ctl3::CopyFile(LPCTSTR FileName, LPCTSTR NewFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, NewFileName);
	return result;
}

BOOL CLSV2ctl3::DeleteDir(LPCTSTR PathName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PathName);
	return result;
}

BOOL CLSV2ctl3::DeleteFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CLSV2ctl3::DisConnect()
{
	BOOL result;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLSV2ctl3::Extract(short Mode, LPCTSTR FileName, LPCTSTR Source, LPCTSTR Target)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Mode, FileName, Source, Target);
	return result;
}

CString CLSV2ctl3::GetDirData(short Type)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Type);
	return result;
}

CString CLSV2ctl3::GetFileData(LPCTSTR FileName, short Type)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		FileName, Type);
	return result;
}

BOOL CLSV2ctl3::Login(LPCTSTR KeyWord)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		KeyWord);
	return result;
}

BOOL CLSV2ctl3::Logout(LPCTSTR KeyWord)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		KeyWord);
	return result;
}

BOOL CLSV2ctl3::MakeDir(LPCTSTR PathName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PathName);
	return result;
}

BOOL CLSV2ctl3::OpenChatWindow(short Left, short Top, short Columns, short Rows, short Font, short Flags, LPCTSTR Caption)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Left, Top, Columns, Rows, Font, Flags, Caption);
	return result;
}

BOOL CLSV2ctl3::ProtectFile(LPCTSTR FileName, short Type)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Type);
	return result;
}

CString CLSV2ctl3::ReceiveDNCInfo(short Type, long InfoPara)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Type, InfoPara);
	return result;
}

long CLSV2ctl3::ReceiveDSPData(short Channel, LPCTSTR ParaString, short* DataBuffer)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_PI2;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Channel, ParaString, DataBuffer);
	return result;
}

long CLSV2ctl3::ReceiveDSPDataRaw(short Channel, LPCTSTR ParaString, short* DataBuffer)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_PI2;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Channel, ParaString, DataBuffer);
	return result;
}

BOOL CLSV2ctl3::ReceiveFile(LPCTSTR FileName, LPCTSTR NewFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, NewFileName);
	return result;
}

BOOL CLSV2ctl3::ReceiveLogFile(LPCTSTR FileName, DATE StartDate, DATE EndDate)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_DATE VTS_DATE;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, StartDate, EndDate);
	return result;
}

CString CLSV2ctl3::ReceiveMachineConstants(LPCTSTR Names)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Names);
	return result;
}

CString CLSV2ctl3::ReceiveMemBlock(short Type, short Address, short Count)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Type, Address, Count);
	return result;
}

BOOL CLSV2ctl3::ReceiveScreen(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

CString CLSV2ctl3::ReceiveTableLine(LPCTSTR FileName, LPCTSTR SQLQuery, long StartLine)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		FileName, SQLQuery, StartLine);
	return result;
}

BOOL CLSV2ctl3::ReConnect()
{
	BOOL result;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLSV2ctl3::RenameFile(LPCTSTR FileName, LPCTSTR NewFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, NewFileName);
	return result;
}

BOOL CLSV2ctl3::Restore(short Mode, LPCTSTR FileName, LPCTSTR Selection)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Mode, FileName, Selection);
	return result;
}

BOOL CLSV2ctl3::RunProgram(LPCTSTR ProgramName, short RunMode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ProgramName, RunMode);
	return result;
}

BOOL CLSV2ctl3::SetEventMask(short Mode, short Class, short EventId, short Sender, short Priority, LPCTSTR Type)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Mode, Class, EventId, Sender, Priority, Type);
	return result;
}

BOOL CLSV2ctl3::SetFileTime(LPCTSTR FileName, DATE FileTime)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_DATE;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, FileTime);
	return result;
}

BOOL CLSV2ctl3::SetOverride(short Type, long Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Type, Value);
	return result;
}

BOOL CLSV2ctl3::SetPreset(long PresetEntry, LPCTSTR PositionMC, LPCTSTR PositionWC, LPCTSTR BaseRotation)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PresetEntry, PositionMC, PositionWC, BaseRotation);
	return result;
}

BOOL CLSV2ctl3::TestConnection(short Mode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Mode);
	return result;
}

BOOL CLSV2ctl3::TransmitChatText(LPCTSTR Text)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Text);
	return result;
}

BOOL CLSV2ctl3::TransmitDSPString(short Channel, LPCTSTR CommandString)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Channel, CommandString);
	return result;
}

BOOL CLSV2ctl3::TransmitFile(LPCTSTR FileName, LPCTSTR NewFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, NewFileName);
	return result;
}

BOOL CLSV2ctl3::TransmitGraphicsCommand(short Command, short ServerPort)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Command, ServerPort);
	return result;
}

BOOL CLSV2ctl3::TransmitKeycode(long Keycode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Keycode);
	return result;
}

BOOL CLSV2ctl3::TransmitMachineConstants(LPCTSTR Names, LPCTSTR Values, long ExecutionFlags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Names, Values, ExecutionFlags);
	return result;
}

BOOL CLSV2ctl3::TransmitMemBlock(short Type, short Address, LPCTSTR MemTable)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Type, Address, MemTable);
	return result;
}

BOOL CLSV2ctl3::TransmitPlcCommand(long Command)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Command);
	return result;
}

BOOL CLSV2ctl3::TransmitPlcString(LPCTSTR DataString)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		DataString);
	return result;
}

BOOL CLSV2ctl3::TransmitSysCommand(long Command)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Command);
	return result;
}

void CLSV2ctl3::LogInformation(LPCTSTR InfoString)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 InfoString);
}

void CLSV2ctl3::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
